"use strict";
var QUERY_HOOK_INSERT_MANY = 'insertMany', QUERY_HOOK_FIND_ONE_AND_UPDATE = 'findOneAndUpdate', QUERY_HOOK_FIND_ONE_AND_REMOVE = 'findOneAndRemove', DOCUMENT_HOOK_INIT = 'init', DOCUMENT_HOOK_VALIDATE = 'validate', DOCUMENT_HOOK_SAVE = 'save', DOCUMENT_HOOK_REMOVE = 'remove', QUERY_HOOK_COUNT = 'count', QUERY_HOOK_FIND = 'find', QUERY_HOOK_FIND_ONE = 'findOne', ON_BEFORE_INIT = 'onBeforeInit', ON_BEFORE_CREATE = 'onBeforeCreate', ON_BEFORE_UPDATE = 'onBeforeUpdate', ON_BEFORE_REMOVE = 'onBeforeRemove', ON_BEFORE_VALIDATE = 'onBeforeValidate', ON_BEFORE_COUNT = 'onBeforeCount', ON_BEFORE_FIND = 'onBeforeFind', ON_BEFORE_FIND_ONE = 'onBeforeFindOne', ON_BEFORE_FIND_AND_REMOVE = 'onBeforeFindAndRemove', ON_BEFORE_FIND_AND_UPDATE = 'onBeforeFindAndUpdate', ON_BEFORE_INSERT_MANY = 'onBeforeInsertMany', ON_AFTER_INIT = 'onAfterInit', ON_AFTER_CREATE = 'onAfterCreate', ON_AFTER_UPDATE = 'onAfterUpdate', ON_AFTER_REMOVE = 'onAfterRemove', ON_AFTER_VALIDATE = 'onAfterValidate', ON_AFTER_COUNT = 'onAfterCount', ON_AFTER_FIND = 'onAfterFind', ON_AFTER_FIND_ONE = 'onAfterFindOne', ON_AFTER_FIND_AND_REMOVE = 'onAfterFindAndRemove', ON_AFTER_FIND_AND_UPDATE = 'onAfterFindAndUpdate', ON_AFTER_INSERT_MANY = 'onAfterInsertMany';
function runNextFunction(next, context) {
    if (typeof next === 'function') {
        next.apply(context);
    }
}
function emitAndRunNext(context, eventName, next) {
    context.model(context.constructor.modelName).emit(eventName, context);
    runNextFunction(next, context);
}
function emitAndRunNextForQuery(model, eventName, next) {
    model.emit(eventName, model);
    runNextFunction(next, model);
}
var EventNames = (function () {
    function EventNames() {
    }
    return EventNames;
}());
EventNames.ON_BEFORE_INIT = ON_BEFORE_INIT;
EventNames.ON_BEFORE_CREATE = ON_BEFORE_CREATE;
EventNames.ON_BEFORE_UPDATE = ON_BEFORE_UPDATE;
EventNames.ON_BEFORE_REMOVE = ON_BEFORE_REMOVE;
EventNames.ON_BEFORE_VALIDATE = ON_BEFORE_VALIDATE;
EventNames.ON_BEFORE_COUNT = ON_BEFORE_COUNT;
EventNames.ON_BEFORE_FIND = ON_BEFORE_FIND;
EventNames.ON_BEFORE_FIND_ONE = ON_BEFORE_FIND_ONE;
EventNames.ON_BEFORE_FIND_AND_REMOVE = ON_BEFORE_FIND_AND_REMOVE;
EventNames.ON_BEFORE_FIND_AND_UPDATE = ON_BEFORE_FIND_AND_UPDATE;
EventNames.ON_BEFORE_INSERT_MANY = ON_BEFORE_INSERT_MANY;
EventNames.ON_AFTER_INIT = ON_AFTER_INIT;
EventNames.ON_AFTER_CREATE = ON_AFTER_CREATE;
EventNames.ON_AFTER_UPDATE = ON_AFTER_UPDATE;
EventNames.ON_AFTER_REMOVE = ON_AFTER_REMOVE;
EventNames.ON_AFTER_VALIDATE = ON_AFTER_VALIDATE;
EventNames.ON_AFTER_COUNT = ON_AFTER_COUNT;
EventNames.ON_AFTER_FIND = ON_AFTER_FIND;
EventNames.ON_AFTER_FIND_ONE = ON_AFTER_FIND_ONE;
EventNames.ON_AFTER_FIND_AND_REMOVE = ON_AFTER_FIND_AND_REMOVE;
EventNames.ON_AFTER_FIND_AND_UPDATE = ON_AFTER_FIND_AND_UPDATE;
EventNames.ON_AFTER_INSERT_MANY = ON_AFTER_INSERT_MANY;
exports.EventNames = EventNames;
Object.freeze(EventNames);
function mongooseEventsSerialPlugin(schema, options) {
    schema
        .pre(DOCUMENT_HOOK_INIT, function (next) {
        emitAndRunNext(this, EventNames.ON_BEFORE_INIT, next);
    })
        .post(DOCUMENT_HOOK_REMOVE, function (next) {
        emitAndRunNext(this, EventNames.ON_AFTER_INIT, next);
    })
        .pre(DOCUMENT_HOOK_SAVE, function (next) {
        this.$$isNewRecord = this.isNew;
        emitAndRunNext(this, this.$$isNewRecord ? EventNames.ON_BEFORE_CREATE : EventNames.ON_BEFORE_UPDATE, next);
    })
        .post(DOCUMENT_HOOK_SAVE, function (next) {
        emitAndRunNext(this, this.$$isNewRecord ? EventNames.ON_AFTER_CREATE : EventNames.ON_AFTER_UPDATE, next);
    })
        .pre(DOCUMENT_HOOK_VALIDATE, function (next) {
        emitAndRunNext(this, EventNames.ON_BEFORE_VALIDATE, next);
    })
        .post(DOCUMENT_HOOK_VALIDATE, function (next) {
        emitAndRunNext(this, EventNames.ON_AFTER_VALIDATE, next);
    })
        .pre(DOCUMENT_HOOK_REMOVE, function (next) {
        emitAndRunNext(this, EventNames.ON_BEFORE_REMOVE, next);
    })
        .post(DOCUMENT_HOOK_REMOVE, function (next) {
        emitAndRunNext(this, EventNames.ON_AFTER_REMOVE, next);
    })
        .pre(QUERY_HOOK_COUNT, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_COUNT, next);
    })
        .post(QUERY_HOOK_COUNT, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_COUNT, next);
    })
        .pre(QUERY_HOOK_FIND, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_FIND, next);
    })
        .post(QUERY_HOOK_FIND, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_FIND, next);
    })
        .pre(QUERY_HOOK_FIND_ONE, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_FIND_ONE, next);
    })
        .post(QUERY_HOOK_FIND_ONE, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_FIND_ONE, next);
    })
        .pre(QUERY_HOOK_FIND_ONE_AND_REMOVE, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_FIND_AND_REMOVE, next);
    })
        .post(QUERY_HOOK_FIND_ONE_AND_REMOVE, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_FIND_AND_REMOVE, next);
    })
        .pre(QUERY_HOOK_FIND_ONE_AND_UPDATE, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_FIND_AND_UPDATE, next);
    })
        .post(QUERY_HOOK_FIND_ONE_AND_UPDATE, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_FIND_AND_UPDATE, next);
    })
        .pre(QUERY_HOOK_INSERT_MANY, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_INSERT_MANY, next);
    })
        .post(QUERY_HOOK_INSERT_MANY, function (next) {
        emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_INSERT_MANY, next);
    });
}
exports.mongooseEventsSerialPlugin = mongooseEventsSerialPlugin;
//# sourceMappingURL=mongoose_events.js.map