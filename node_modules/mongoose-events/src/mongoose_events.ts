import {Schema} from "mongoose";

const
    /*QUERY_HOOK_UPDATE = 'update',*/
    QUERY_HOOK_INSERT_MANY = 'insertMany',
    QUERY_HOOK_FIND_ONE_AND_UPDATE = 'findOneAndUpdate',
    QUERY_HOOK_FIND_ONE_AND_REMOVE = 'findOneAndRemove',
    DOCUMENT_HOOK_INIT = 'init',
    DOCUMENT_HOOK_VALIDATE = 'validate',
    DOCUMENT_HOOK_SAVE = 'save',
    DOCUMENT_HOOK_REMOVE = 'remove',
    QUERY_HOOK_COUNT = 'count',
    QUERY_HOOK_FIND = 'find',
    QUERY_HOOK_FIND_ONE = 'findOne',
    ON_BEFORE_INIT = 'onBeforeInit',
    ON_BEFORE_CREATE = 'onBeforeCreate',
    ON_BEFORE_UPDATE = 'onBeforeUpdate',
    ON_BEFORE_REMOVE = 'onBeforeRemove',
    ON_BEFORE_VALIDATE = 'onBeforeValidate',
    ON_BEFORE_COUNT = 'onBeforeCount',
    ON_BEFORE_FIND = 'onBeforeFind',
    ON_BEFORE_FIND_ONE = 'onBeforeFindOne',
    ON_BEFORE_FIND_AND_REMOVE = 'onBeforeFindAndRemove',
    ON_BEFORE_FIND_AND_UPDATE = 'onBeforeFindAndUpdate',
    ON_BEFORE_INSERT_MANY = 'onBeforeInsertMany',
    ON_AFTER_INIT = 'onAfterInit',
    ON_AFTER_CREATE = 'onAfterCreate',
    ON_AFTER_UPDATE = 'onAfterUpdate',
    ON_AFTER_REMOVE = 'onAfterRemove',
    ON_AFTER_VALIDATE = 'onAfterValidate',
    ON_AFTER_COUNT = 'onAfterCount',
    ON_AFTER_FIND = 'onAfterFind',
    ON_AFTER_FIND_ONE = 'onAfterFindOne',
    ON_AFTER_FIND_AND_REMOVE = 'onAfterFindAndRemove',
    ON_AFTER_FIND_AND_UPDATE = 'onAfterFindAndUpdate',
    ON_AFTER_INSERT_MANY = 'onAfterInsertMany';

function runNextFunction(next, context) {
    if (typeof next === 'function') {
        next.apply(context);
    }
}

function emitAndRunNext(context: any, eventName: string, next): void {
    context.model(context.constructor.modelName).emit(eventName, context);
    runNextFunction(next, context);
}
function emitAndRunNextForQuery(model: any, eventName: string, next): void {
    model.emit(eventName, model);
    runNextFunction(next, model);
}
export class EventNames {
    static ON_BEFORE_INIT: string = ON_BEFORE_INIT;
    static ON_BEFORE_CREATE: string = ON_BEFORE_CREATE;
    static ON_BEFORE_UPDATE: string = ON_BEFORE_UPDATE;
    static ON_BEFORE_REMOVE: string = ON_BEFORE_REMOVE;
    static ON_BEFORE_VALIDATE: string = ON_BEFORE_VALIDATE;
    static ON_BEFORE_COUNT: string = ON_BEFORE_COUNT;
    static ON_BEFORE_FIND: string = ON_BEFORE_FIND;
    static ON_BEFORE_FIND_ONE: string = ON_BEFORE_FIND_ONE;
    static ON_BEFORE_FIND_AND_REMOVE: string = ON_BEFORE_FIND_AND_REMOVE;
    static ON_BEFORE_FIND_AND_UPDATE: string = ON_BEFORE_FIND_AND_UPDATE;
    static ON_BEFORE_INSERT_MANY: string = ON_BEFORE_INSERT_MANY;
    static ON_AFTER_INIT: string = ON_AFTER_INIT;
    static ON_AFTER_CREATE: string = ON_AFTER_CREATE;
    static ON_AFTER_UPDATE: string = ON_AFTER_UPDATE;
    static ON_AFTER_REMOVE: string = ON_AFTER_REMOVE;
    static ON_AFTER_VALIDATE: string = ON_AFTER_VALIDATE;
    static ON_AFTER_COUNT: string = ON_AFTER_COUNT;
    static ON_AFTER_FIND: string = ON_AFTER_FIND;
    static ON_AFTER_FIND_ONE: string = ON_AFTER_FIND_ONE;
    static ON_AFTER_FIND_AND_REMOVE: string = ON_AFTER_FIND_AND_REMOVE;
    static ON_AFTER_FIND_AND_UPDATE: string = ON_AFTER_FIND_AND_UPDATE;
    static ON_AFTER_INSERT_MANY: string = ON_AFTER_INSERT_MANY;
}
Object.freeze(EventNames);

export function mongooseEventsSerialPlugin(schema: Schema, options: Object) {

    schema
        .pre(DOCUMENT_HOOK_INIT, function (next) {
            emitAndRunNext(this, EventNames.ON_BEFORE_INIT, next);
        })
        .post(DOCUMENT_HOOK_REMOVE, function (next) {
            emitAndRunNext(this, EventNames.ON_AFTER_INIT, next);
        })

        .pre(DOCUMENT_HOOK_SAVE, function (next) {
            this.$$isNewRecord = this.isNew;
            emitAndRunNext(this, this.$$isNewRecord ? EventNames.ON_BEFORE_CREATE : EventNames.ON_BEFORE_UPDATE, next);
        })
        .post(DOCUMENT_HOOK_SAVE, function (next) {
            emitAndRunNext(this, this.$$isNewRecord ? EventNames.ON_AFTER_CREATE : EventNames.ON_AFTER_UPDATE, next);
        })

        .pre(DOCUMENT_HOOK_VALIDATE, function (next) {
            emitAndRunNext(this, EventNames.ON_BEFORE_VALIDATE, next);
        })
        .post(DOCUMENT_HOOK_VALIDATE, function (next) {
            emitAndRunNext(this, EventNames.ON_AFTER_VALIDATE, next);
        })

        .pre(DOCUMENT_HOOK_REMOVE, function (next) {
            emitAndRunNext(this, EventNames.ON_BEFORE_REMOVE, next);
        })
        .post(DOCUMENT_HOOK_REMOVE, function (next) {
            emitAndRunNext(this, EventNames.ON_AFTER_REMOVE, next);
        })

        .pre(QUERY_HOOK_COUNT, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_COUNT, next);
        })
        .post(QUERY_HOOK_COUNT, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_COUNT, next);
        })

        .pre(QUERY_HOOK_FIND, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_FIND, next);
        })
        .post(QUERY_HOOK_FIND, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_FIND, next);
        })

        .pre(QUERY_HOOK_FIND_ONE, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_FIND_ONE, next);
        })
        .post(QUERY_HOOK_FIND_ONE, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_FIND_ONE, next);
        })

        .pre(QUERY_HOOK_FIND_ONE_AND_REMOVE, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_FIND_AND_REMOVE, next);
        })
        .post(QUERY_HOOK_FIND_ONE_AND_REMOVE, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_FIND_AND_REMOVE, next);
        })

        .pre(QUERY_HOOK_FIND_ONE_AND_UPDATE, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_FIND_AND_UPDATE, next);
        })
        .post(QUERY_HOOK_FIND_ONE_AND_UPDATE, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_FIND_AND_UPDATE, next);
        })

        .pre(QUERY_HOOK_INSERT_MANY, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_BEFORE_INSERT_MANY, next);
        })
        .post(QUERY_HOOK_INSERT_MANY, function (next) {
            emitAndRunNextForQuery(this.model, EventNames.ON_AFTER_INSERT_MANY, next);
        })
    ;
}